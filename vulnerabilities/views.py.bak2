# vulnerabilities/views.py

import re
from django.shortcuts import render, get_object_or_404
from django.db.models import Q, Count
from .models import Vulnerability
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from datetime import datetime
from django.utils import timezone


def home(request):
    # 计算总漏洞数（包括严重性为空的漏洞）
    total_vulnerabilities = Vulnerability.objects.count()
    
    # 按严重性分类统计漏洞数，排除严重性为空的漏洞
    severity_counts = Vulnerability.objects.exclude(severity__isnull=True).exclude(severity='').values('severity').annotate(count=Count('severity'))
    
    # 转换为字典
    severity_counts_dict = {item['severity']: item['count'] for item in severity_counts}
    
    # 定义所有可能的严重性等级
    severity_levels = ['低危', '中危', '高危', '严重']
    
    # 确保所有严重性等级都有对应的计数，若不存在则设为0
    for level in severity_levels:
        if level not in severity_counts_dict:
            severity_counts_dict[level] = 0
    
    context = {
        'total_vulnerabilities': total_vulnerabilities,
        'severity_counts': severity_counts_dict,
    }
    return render(request, 'vulnerabilities/home.html', context)

def vulnerability_list(request):
    # 获取所有漏洞，按创建时间降序排列，排除严重性为空的漏洞
    vulnerabilities = Vulnerability.objects.all().order_by('-create_time').exclude(severity__isnull=True).exclude(severity='')
    
    # 获取搜索参数
    query = request.GET.get('q', '').strip()
    
    # 获取严重性过滤参数
    severity_filter = request.GET.get('severity', '').strip()
    
    # 应用搜索条件
    if query:
        vulnerabilities = vulnerabilities.filter(
            Q(key__icontains=query) |
            Q(cve__icontains=query) |
            Q(title__icontains=query)
        )
    
    # 应用严重性过滤条件
    if severity_filter and severity_filter in dict(Vulnerability.SEVERITY_CHOICES):
        vulnerabilities = vulnerabilities.filter(severity=severity_filter)
    
    # 分页设置
    paginator = Paginator(vulnerabilities, 10)  # 每页显示 10 条
    page = request.GET.get('page')
    
    try:
        vulnerabilities_page = paginator.page(page)
    except PageNotAnInteger:
        vulnerabilities_page = paginator.page(1)
    except EmptyPage:
        vulnerabilities_page = paginator.page(paginator.num_pages)
    
    context = {
        'vulnerabilities': vulnerabilities_page,
        'query': query,
        'severity_filter': severity_filter,
        'severity_choices': Vulnerability.SEVERITY_CHOICES,
    }
    return render(request, 'vulnerabilities/vulnerability_list.html', context)



def parse_custom_datetime(raw_datetime_str):
    """
    解析非标准的时间字符串，例如：
    "2025-01-04 23:31:37.736178 +0800 CST m=+0.287828918"
    """
    pattern = r'^(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}(?:\.\d+)?) ([+-]\d{4}) [A-Za-z]+'
    match = re.match(pattern, raw_datetime_str)
    if match:
        dt_part = match.group(1)
        tz_part = match.group(2)
        dt_str = f"{dt_part} {tz_part}"
        try:
            # 解析带时区的时间
            parsed_dt = datetime.strptime(dt_str, '%Y-%m-%d %H:%M:%S.%f %z')
        except ValueError:
            try:
                # 在某些情况下，秒的小数部分可能缺失
                parsed_dt = datetime.strptime(dt_str, '%Y-%m-%d %H:%M:%S %z')
            except ValueError:
                parsed_dt = None
        return parsed_dt
    return None

def vulnerability_detail(request, pk):
    vulnerability = get_object_or_404(Vulnerability, pk=pk)
    
    # 解析 create_time 和 update_time
    parsed_create_time = None
    parsed_update_time = None
    
    if vulnerability.create_time:
        parsed_create_time = parse_custom_datetime(vulnerability.create_time)
    
    if vulnerability.update_time:
        parsed_update_time = parse_custom_datetime(vulnerability.update_time)
    
    # 解析参考资料
    references = vulnerability.references
    parsed_references = []
    if references and isinstance(references, list):
        refs_str = references[0]  # 假设 references 是列表，且第一个元素是字符串
        parsed_references = [ref.strip() for ref in re.split(r'[;,]', refs_str) if ref.strip()]
    
    context = {
        'vulnerability': vulnerability,
        'parsed_references': parsed_references,
        'parsed_create_time': parsed_create_time,
        'parsed_update_time': parsed_update_time,
    }
    return render(request, 'vulnerabilities/vulnerability_detail.html', context)